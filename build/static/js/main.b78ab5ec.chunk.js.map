{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryP.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryP.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","activeCases","value","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","active","apiUrl","fetchApi","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","options","legend","fontColor","scales","yAxes","ticks","xAxes","barChart","display","title","text","CountryP","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","theme","createMuiTheme","palette","type","App","state","fetchedData","setState","this","ThemeProvider","image","src","corona","alt","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.b78ab5ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2s7IY\",\"card\":\"Cards_card__18v_o\",\"infected\":\"Cards_infected__RY-Dr\",\"recovered\":\"Cards_recovered__UHliV\",\"active\":\"Cards_active__3g2Lk\",\"deaths\":\"Cards_deaths__wxcP8\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from 'react-countup';\r\nimport styles from \"./Cards.module.css\";\r\nimport cx from 'classnames';\r\n\r\n\r\n\r\n\r\n\r\nconst Cards = ({data:{confirmed, recovered, deaths, lastUpdate}}) => {\r\nif (!confirmed){\r\nreturn 'Loading...'\r\n}\r\n\r\n\r\nconst activeCases = confirmed.value - deaths.value - recovered.value;\r\n\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n            <Typography variant=\"h5\">\r\n                <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography variant=\"body2\">Total cases of COVID-19</Typography>\r\n            <br />\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Recoverd</Typography>\r\n            <Typography variant=\"h5\">\r\n                <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography variant=\"body2\">Recoveries cases from COVID-19</Typography>\r\n            <br />\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.active)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Active now</Typography>\r\n            <Typography variant=\"h5\">\r\n                <CountUp start={0} end={activeCases} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography variant=\"body2\">A number of cases right now</Typography>\r\n            <br />\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n            <Typography variant=\"h5\">\r\n                <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography variant=\"body2\">Deaths caused from COVID-19</Typography>\r\n            <br />\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst apiUrl = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchApi = async (country) => {\r\nlet changeableUrl = apiUrl;\r\nif (country) {\r\n    changeableUrl = `${apiUrl}/countries/${country}`\r\n}\r\n\r\n\r\n    try {\r\n        const {\r\n            data: {\r\n                confirmed,\r\n                recovered,\r\n                deaths,\r\n                lastUpdate\r\n            }\r\n        } = await axios.get(changeableUrl);\r\n\r\n        const modifiedData = {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate,\r\n        }\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const {\r\n            data\r\n        } = await axios.get(`${apiUrl}/daily`);\r\n\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }))\r\n        return modifiedData\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data: {countries}} = await axios.get(`${apiUrl}/countries`)\r\n        return countries.map((country) => country.name)\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    fetchApi();\r\n  }, []);\r\n\r\n\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"rgba(111, 141, 226, 0.541)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(194, 80, 80, 0.541)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: {\r\n          labels: {fontColor: 'white'},\r\n        },\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                fontColor: \"white\",\r\n              },\r\n            },\r\n          ],\r\n          xAxes: [\r\n            {\r\n              ticks: {\r\n                fontColor: \"white\",\r\n              },\r\n            },\r\n          ],\r\n        }\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  \r\n  console.log(confirmed, recovered, deaths);\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recoverd\",\"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(57, 103, 230, 0.541)\",\r\n              \"rgba(103, 250, 98, 0.541)\",\r\n              \"rgba(236, 72, 72, 0.541)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n            \r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false},\r\n        title: { display: true, text: `Current state in ${country}`,  },\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                fontColor: \"white\",\r\n              },\r\n            },\r\n          ],\r\n          xAxes: [\r\n            {\r\n              ticks: {\r\n                fontColor: \"white\",\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport styles from './CountryP.module.css';\r\nimport {fetchCountries} from '../../api/';\r\n\r\nconst CountryP = ({handleCountryChange}) => {\r\nconst [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n\r\nuseEffect(() => {\r\n    const fetchApi = async () => {\r\nsetFetchedCountries(await fetchCountries())\r\n    }\r\n    fetchApi();\r\n}, [setFetchedCountries])\r\n\r\n    return (\r\n      <FormControl className={styles.formControl}>\r\n          <NativeSelect   defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value)}>\r\n              <option value=\"\">Global</option>\r\n              {fetchedCountries.map((country, i) => <option  key={i} value={country}>{country} </option>)}\r\n          </NativeSelect>\r\n      </FormControl>\r\n    )\r\n}\r\nexport default CountryP;","import React from 'react';\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport {Cards, Chart, CountryP} from './components';\r\nimport styles from './App.module.css';\r\nimport {fetchApi} from './api/index';\r\nimport {createMuiTheme} from '@material-ui/core'\r\n\r\nimport corona from './images/image.png'\r\n\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      type: \"dark\"\r\n    }\r\n  });\r\n  \r\n\r\n\r\nclass App extends React.Component {\r\n   state = {\r\n     data: {},\r\n     country: '',\r\n   }\r\n   \r\n   \r\n    async componentDidMount () {\r\nconst fetchedData = await fetchApi();\r\n\r\nthis.setState({ data: fetchedData})\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchApi(country);\r\nconsole.log(fetchedData)\r\nthis.setState({ data: fetchedData, country: country });\r\n\r\n    }\r\n\r\n    render() {\r\n        const { data, country} = this.state;\r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={corona} alt=\"coronaV\"/>\r\n                <Cards data={data}/>\r\n                <CountryP handleCountryChange={this.handleCountryChange}/>\r\n                <Chart data={data} country={country} />\r\n            </div>\r\n            <footer>&copy; Copyright 2020 David Nahum</footer>\r\n            </ThemeProvider>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDom.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__12UNy\",\"image\":\"App_image__pDLr0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__18QzZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryP_formControl__3iyqw\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}